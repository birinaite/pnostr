const fragmentList=[];let totalAudioDuration=0;const fluxo=[];let eventIdsHexGlobal=[];let relayUrl;function getPostIdFromUrl(){const params=new URLSearchParams(window.location.search);return params.get("id")}async function fetchControlFragments(postId,relayUrl){const ws=new WebSocket(relayUrl);const subscriptionId="sub_"+Date.now();return new Promise((resolve,reject)=>{ws.onopen=function(){const reqMessage=["REQ",subscriptionId,{ids:[postId]}];ws.send(JSON.stringify(reqMessage))};ws.onmessage=function(event){try{const data=JSON.parse(event.data);if(data[0]==="EVENT"&&data[2]&&data[2].content){const content=data[2].content;const totalTimeTag=data[2].tags.find(tag=>tag[0]==="t");if(totalTimeTag&&totalTimeTag[1]){totalAudioDuration=parseInt(totalTimeTag[1],10);console.log(`Tempo total do áudio: ${totalAudioDuration} segundos`);setTotalDuration(totalAudioDuration)}fragmentList.unshift(content);const nextTag=data[2].tags.find(tag=>tag[0]==="e");if(nextTag&&nextTag[1]){const reqMessage=["REQ",subscriptionId,{ids:[nextTag[1]]}];ws.send(JSON.stringify(reqMessage))}else{ws.close();resolve(processBase64Concatenation())}}}catch(error){reject(error)}};ws.onerror=function(err){reject(err)};ws.onclose=function(){resolve()}})}function processBase64Concatenation(){const base64Concatenated=fragmentList.join("");try{const decodedContent=atob(base64Concatenated);eventIdsHexGlobal=JSON.parse(decodedContent);console.log(`Total de fragmentos de mídia: ${eventIdsHexGlobal.length}`);fetchAudioFragments()}catch(error){console.error("Erro ao decodificar o Base64:",error.message)}}async function fetchAudioFragments(){const ws=new WebSocket(relayUrl);const subscriptionId="sub_"+Date.now();return new Promise((resolve,reject)=>{ws.onopen=function(){eventIdsHexGlobal.forEach(id=>{const reqMessage=["REQ",subscriptionId,{ids:[id]}];ws.send(JSON.stringify(reqMessage))})};ws.onmessage=function(event){try{const data=JSON.parse(event.data);if(data[0]==="EVENT"&&data[2]&&data[2].content){const content=data[2].content;const arrayBuffer=base64ToArrayBuffer(content);const blob=new Blob([arrayBuffer],{type:"audio/mp3"});fetch(URL.createObjectURL(blob)).then(response=>response.arrayBuffer()).then(data=>addFragment(data))}}catch(error){reject(error)}};ws.onerror=function(err){reject(err)};ws.onclose=function(){resolve()}})}function base64ToArrayBuffer(base64){const binaryString=window.atob(base64);const len=binaryString.length;const bytes=new Uint8Array(len);for(let i=0;i<len;i++){bytes[i]=binaryString.charCodeAt(i)}return bytes.buffer}let postId=getPostIdFromUrl();if(postId){const dataRec=JSON.parse(atob(postId));postId=dataRec.id;relayUrl=dataRec.relay;fetchControlFragments(postId,relayUrl).then(()=>{console.log("Fragmentos de controle carregados com sucesso.")})["catch"](error=>{console.error("Erro ao carregar fragmentos:",error)})}else{console.error("ID do post não encontrado na URL.")}let totalDuration;function setTotalDuration(duration){if(typeof duration==="number"&&!isNaN(duration)){mediaSource.duration=duration;console.log("Duração total do áudio definida:",duration)}}const audioPlayer=document.getElementById("audioPlayer");const mediaSource=new MediaSource;audioPlayer.src=URL.createObjectURL(mediaSource);let sourceBuffer;const fragmentQueue=[];let isAppending=false;let currentFragmentIndex=0;mediaSource.addEventListener("sourceopen",()=>{sourceBuffer=mediaSource.addSourceBuffer("audio/mpeg");sourceBuffer.addEventListener("updateend",()=>{if(fragmentQueue.length>currentFragmentIndex){appendNextFragment()}else{isAppending=false}})});function appendNextFragment(){if(!sourceBuffer.updating&&fragmentQueue[currentFragmentIndex]){const fragment=fragmentQueue[currentFragmentIndex];sourceBuffer.appendBuffer(fragment);currentFragmentIndex++}}function cleanUpBuffer(){const currentTime=audioPlayer.currentTime;const bufferLimit=10;if(sourceBuffer.buffered.length>0){const removeEnd=Math.max(currentTime-bufferLimit,0);sourceBuffer.remove(0,removeEnd)}}function restoreFragments(position){currentFragmentIndex=Math.floor(position/3);appendNextFragment()}audioPlayer.addEventListener("seeking",()=>{const seekPosition=audioPlayer.currentTime;if(!isInBuffer(seekPosition)){restoreFragments(seekPosition)}});function isInBuffer(position){for(let i=0;i<sourceBuffer.buffered.length;i++){if(position>=sourceBuffer.buffered.start(i)&&position<=sourceBuffer.buffered.end(i)){return true}}return false}function addFragment(fragment){fragmentQueue.push(fragment);if(!isAppending&&mediaSource.readyState==="open"){appendNextFragment()}}setInterval(cleanUpBuffer,3e4);
