let audioContext=null;let audioBuffer=null;const source=null;let isPlaying=false;let startTime=0;let pausedAt=0;let totalDuration=0;let bufferLoadedDuration=0;const progressBar=document.getElementById("progressBar");const bufferBar=document.getElementById("bufferBar");const playPauseButton=document.getElementById("playPauseButton");const trackButton=document.getElementById("trackButton");const currentTimeDisplay=document.getElementById("currentTime");const totalTimeDisplay=document.getElementById("totalTime");let isDragging=false;let animationFrameId;let lastOffset=0;const fragmentList=[];let totalAudioDuration=0;async function fetchControlFragments(postId){const ws=new WebSocket(relayUrl);const subscriptionId="sub_"+Date.now();return new Promise((resolve,reject)=>{ws.onopen=function(){const reqMessage=["REQ",subscriptionId,{ids:[postId]}];ws.send(JSON.stringify(reqMessage))};ws.onmessage=function(event){try{const data=JSON.parse(event.data);if(data[0]==="EVENT"&&data[2]&&data[2].content){const content=data[2].content;const totalTimeTag=data[2].tags.find(tag=>tag[0]==="t");if(totalTimeTag&&totalTimeTag[1]){totalAudioDuration=parseInt(totalTimeTag[1],10);totalTimeDisplay.textContent=formatTime(totalAudioDuration);console.log(`Tempo total do áudio: ${totalAudioDuration} segundos`)}fragmentList.unshift(content);const nextTag=data[2].tags.find(tag=>tag[0]==="e");if(nextTag&&nextTag[1]){const reqMessage=["REQ",subscriptionId,{ids:[nextTag[1]]}];ws.send(JSON.stringify(reqMessage))}else{ws.close();resolve(processBase64Concatenation())}}}catch(error){reject(error)}};ws.onerror=function(err){reject(err)};ws.onclose=function(){resolve()}})}let eventIdsHexGlobal=[];function processBase64Concatenation(){const base64Concatenated=fragmentList.join("");try{const decodedContent=atob(base64Concatenated);eventIdsHexGlobal=JSON.parse(decodedContent);console.log(`Total de fragmentos de mídia: ${eventIdsHexGlobal.length}`);fetchAudioFragments()}catch(error){console.error("Erro ao decodificar o Base64:",error.message)}}let audioBuffers=[];let fragmentStartTimes=[];async function fetchAudioFragments(){audioBuffers=[];fragmentStartTimes=[];let accumulatedDuration=0;const ws=new WebSocket(relayUrl);const subscriptionId="sub_"+Date.now();return new Promise((resolve,reject)=>{ws.onopen=function(){eventIdsHexGlobal.forEach(id=>{const reqMessage=["REQ",subscriptionId,{ids:[id]}];ws.send(JSON.stringify(reqMessage))})};ws.onmessage=async function(event){try{const data=JSON.parse(event.data);if(data[0]==="EVENT"&&data[2]&&data[2].content){const content=data[2].content;const audioData=atob(content);const audioBuffer=new Uint8Array(audioData.length);for(let i=0;i<audioData.length;i++){audioBuffer[i]=audioData.charCodeAt(i)}const decodedBuffer=await decodeAudioFragment(audioBuffer.buffer);audioBuffers.push(decodedBuffer);fragmentStartTimes.push(accumulatedDuration);accumulatedDuration+=decodedBuffer.duration;bufferLoadedDuration+=decodedBuffer.duration;updateBufferBar();if(audioBuffers.length===1){playPauseButton.disabled=false}}}catch(error){reject(error)}};ws.onerror=function(err){reject(err)};ws.onclose=function(){resolve(audioBuffers)}})}async function decodeAudioFragment(arrayBuffer){if(!audioContext){audioContext=new(window.AudioContext||window.webkitAudioContext)}return new Promise((resolve,reject)=>{audioContext.decodeAudioData(arrayBuffer,buffer=>{resolve(buffer)},error=>{reject(error)})})}function getPostIdFromUrl(){const params=new URLSearchParams(window.location.search);return params.get("id")}let postId=getPostIdFromUrl();let relayUrl;if(postId){const dataRec=JSON.parse(atob(postId));postId=dataRec.id;relayUrl=dataRec.relay;fetchControlFragments(postId).then(()=>{console.log("Fragmentos carregados.")})["catch"](error=>{console.error("Erro ao carregar fragmentos:",error)})}else{console.error("ID do post não encontrado na URL.")}playPauseButton.addEventListener("click",function(){if(isPlaying){pauseAudio()}else{playAudio()}});trackButton.addEventListener("mousedown",startDrag);function handleAudioLoad(){if(!audioContext){audioContext=new(window.AudioContext||window.webkitAudioContext)}if(audioBuffer){audioContext.decodeAudioData(audioBuffer,function(decodedData){audioBuffer=decodedData;totalDuration=decodedData.duration;bufferLoadedDuration=0;totalTimeDisplay.textContent=formatTime(totalDuration);document.getElementById("playPauseButton").disabled=false;processNextFragment(decodedData);console.log("Áudio carregado e pronto para reprodução.")})}}function processNextFragment(decodedData){const fragmentDuration=3;const sampleRate=decodedData.sampleRate;const channels=decodedData.numberOfChannels;if(bufferLoadedDuration<totalDuration){const fragmentEndTime=Math.min(bufferLoadedDuration+fragmentDuration,totalDuration);const fragmentLength=Math.ceil((fragmentEndTime-bufferLoadedDuration)*sampleRate);const fragmentData=[];for(let channel=0;channel<channels;channel++){fragmentData.push(new Float32Array(fragmentLength));decodedData.copyFromChannel(fragmentData[channel],channel,bufferLoadedDuration*sampleRate)}bufferLoadedDuration=fragmentEndTime;updateBufferBar();setTimeout(()=>processNextFragment(decodedData),1e3)}}function updateBufferBar(){const bufferPercent=bufferLoadedDuration/totalAudioDuration*100;bufferBar.style.width=`${bufferPercent}%`}function togglePlayPause(){if(!isPlaying){playAudio()}else{pauseAudio()}}function playAudio(){if(!audioContext||audioBuffers.length===0)return;stopAudio();const offset=pausedAt||0;if(offset>bufferLoadedDuration){alert("Essa parte do áudio ainda não foi carregada.");return}const fragmentIndex=findFragmentIndex(offset);const fragmentOffset=offset-fragmentStartTimes[fragmentIndex];playNextFragment(fragmentIndex,fragmentOffset)}let currentFragmentIndex=0;let scheduledSourceNodes=[];function stopAudio(){if(scheduledSourceNodes.length>0){scheduledSourceNodes.forEach(node=>node.stop());scheduledSourceNodes=[]}}function playNextFragment(index,offset=0){if(index<audioBuffers.length){currentFragmentIndex=index;const source=audioContext.createBufferSource();source.buffer=audioBuffers[index];source.connect(audioContext.destination);const playTime=source.buffer.duration-offset;scheduledSourceNodes.push(source);source.start(0,offset);source.onended=function(){lastOffset+=playTime;if(isPlaying){playNextFragment(index+1)}};isPlaying=true;playPauseButton.textContent="Pause";startTime=audioContext.currentTime;updateProgress()}else{isPlaying=false;playPauseButton.textContent="Play";cancelAnimationFrame(animationFrameId)}}function findFragmentIndex(time){for(let i=fragmentStartTimes.length-1;i>=0;i--){if(time>=fragmentStartTimes[i]){return i}}return 0}function pauseAudio(){stopAudio();pausedAt=audioContext.currentTime-startTime+lastOffset;isPlaying=false;playPauseButton.textContent="Play"}function updateProgress(){if(isPlaying&&!isDragging){let currentTime=audioContext.currentTime-startTime+lastOffset;if(currentTime>=totalAudioDuration){currentTime=totalAudioDuration}const progressPercent=currentTime/totalAudioDuration*100;progressBar.style.width=`${progressPercent}%`;currentTimeDisplay.textContent=formatTime(currentTime);moveTrackButton(progressPercent);if(currentTime<totalAudioDuration){animationFrameId=requestAnimationFrame(updateProgress)}else{progressBar.style.width="100%";cancelAnimationFrame(animationFrameId)}}}function moveTrackButton(progressPercent){trackButton.style.left=`${progressPercent}%`}function startDrag(event){isDragging=true;if(isPlaying){pauseAudio()}document.addEventListener("mousemove",dragTrackButton);document.addEventListener("mouseup",stopDrag);cancelAnimationFrame(animationFrameId)}function stopDrag(){document.removeEventListener("mousemove",dragTrackButton);document.removeEventListener("mouseup",stopDrag);isDragging=false;lastOffset=pausedAt;playAudio();requestAnimationFrame(updateProgress)}function dragTrackButton(event){const rect=trackButton.parentNode.getBoundingClientRect();const newX=event.clientX-rect.left;const progressPercent=newX/rect.width*100;const newPosition=newX/rect.width*totalAudioDuration;if(newX>=0&&newX<=rect.width&&newPosition<=bufferLoadedDuration){moveTrackButton(progressPercent);progressBar.style.width=`${progressPercent}%`;currentTimeDisplay.textContent=formatTime(newPosition);pausedAt=newPosition}}function formatTime(seconds){const minutes=Math.floor(seconds/60);const secs=Math.floor(seconds%60);return`${String(minutes).padStart(2,"0")}:${String(secs).padStart(2,"0")}`}